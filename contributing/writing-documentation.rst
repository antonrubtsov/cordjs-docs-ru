***********************
Разработка документации
***********************

Разработка этой документации ведётся с помощью системы документирования `Sphinx <http://sphinx-doc.org/>`_, которую
используют многие другие open-source проекты.


Как развернуть проект документации
==================================

Установка Sphinx и вспомогательных пакетов
------------------------------------------

Для сборки документации из исходников (получение красивой html-версии) необходимо `установить сам Sphinx
<http://sphinx-doc.org/latest/tutorial.html#install-sphinx>`_, :ref:`autobuild` (для
авто-обновления
сборки) и
тему оформления. Если коротко, то нужно в консоли вызвать следующие команды:

.. code-block:: bash

  sudo pip install Sphinx
  sudo pip install sphinx-autobuild
  sudo pip install guzzle_sphinx_theme


Чекаут проекта и команда сборки
-------------------------------

Проект документации лежит в `отдельном репозитории на Github <https://github.com/cordjs/cordjs-docs-ru>`_. Развернуть
его локально и получить готовую сборку очень просто:

.. code-block:: bash

  git clone git@github.com:cordjs/cordjs-docs-ru.git
  cd cordjs-docs-ru
  sphinx-build -a . _build/ && sphinx-autobuild -i ".git/*" -i ".idea/*" . _build/

После этого можно открыть в браузере http://127.0.0.1:8000/ и увидеть результат. Страница будет автоматически
обновляться при изменении исходников.

Если нужна просто одноразовая сборка, можно воспользоваться упрощённым способом --- находясь в папке проекта,
запустить команду:

.. code-block:: bash

  make html


Редактирование исходных файлов и фиксация изменений
---------------------------------------------------

Для редактирования исходников можно использовать любой текстовый редактор, но будет удобнее, если он поддерживает
подсветку синтаксиса для файлов :abbr:`reST (Restructured Text)`.

* Для *Intellij Idea* существует плагин с базовой поддержкой подсветки: `ReStructuredText Support
  <https://plugins.jetbrains.com/plugin/7124>`_.
* Чуть лучше выглядит подсветка в плагине для *Sublime Text*: `Restructured​Text Improved
  <https://packagecontrol.io/packages/RestructuredText%20Improved>`_.

Фиксация изменений производится так же, как и для любого исходника в git-репозитории.


.. _autobuild:

sphinx-autobuild
----------------

В процессе написания документации удобно использовать `sphinx-autobuild
<https://pypi.python.org/pypi/sphinx-autobuild>`_ --- инструмент, который "слушает" изменения в исходниках
документации, автоматически пересобирает проект, раздаёт его через свой локальный веб-сервер и автоматически
перезагружает открытую в браузере страницу после каждой пересборки. Таким образом, не нужно каждый раз жать ``F5``
после изменений, чтобы посмотреть результат.

.. code-block:: bash

  sphinx-autobuild -i ".git/*" -i ".idea/*" . _build/

Для запуска используется опция ``-i`` для того, чтобы утилита не учитывала изменения в файлах :abbr:`IDE (Integrated
Development Environment)` и репозитории ``git``.


.. warning::

  При изменениях в файлах темы (например, в ``style.css``) ``sphinx-autobuild`` не всегда срабатывает корректно. В
  таких случаях, чтобы увидеть результат изменений, следует полностью пересобрать проект. Помогает следующая команда:

  .. code-block:: bash

    sphinx-build -a . _build/ && sphinx-autobuild -i ".git/*" -i ".idea/*" . _build/



Краткий экскурс и полезные ссылки по Sphinx
===========================================

Основная идея работы со Sphinx --- редактировать простые текстовые файлы со специальной разметкой, которая определяет
форматирование, структуру и взаимосвязи разных кусков документации, а затем запустить сборщик, который из этих файлов
сгенерирует красивый html, pdf или другой поддерживаемый формат по желанию.

Формат исходных файлов называется ``reStructuredText`` (расширение файлов ``.rst``). Чтобы его изучить, полезно почитать
следующее:

* `reStructuredText Primer <http://sphinx-doc.org/rest.html#rst-primer>`_ --- основные правила форматирования.
* `Sphinx-specific markup <http://sphinx-doc.org/markup/index.html#sphinxmarkup>`_ --- специальные конструкции,
  поддерживаемые в Sphinx.
* `Restructured Text (reST) and Sphinx CheatSheet
  <http://openalea.gforge.inria.fr/doc/openalea/doc/_build/html/source/sphinx/rest_syntax.html>`_ --- альтернативная
  шпаргалка по :abbr:`reST (Restructured Text)`.


Структура документации
======================

В корневой папке проекта присутствуют только два исходных файла документации:

* Стартовая страница ``index.rst``.
* Главное корневое оглавление ``contents.rst``, которое определяет структуру всей документации.

Документация делится на разделы, исходные файлы каждого из которых лежат в отдельной папке. В папке раздела должен
быть создан файл ``index.rst`` с оглавлением (директивой ``toctree``), в котором перечислены все файлы с контентом из
этого раздела и индексные файлы додразделов (если есть). Ссылка на файл ``index.rst`` раздела добавляется в ``toctree``
главного оглавления проекта в файле ``contents.rst``.

Подробнее об организации структуры с помощью директивы ``toctree`` можно почитать `в соответствующем разделе
документации Sphinx <http://sphinx-doc.org/markup/toctree.html>`_.


"Код-стайл" для исходных файлов документации ``.rst``
=====================================================

Максимальная ширина строки в исходном файле - 120 символов. Всё, что длиннее, должно переноситься.


Форматирование заголовков
-------------------------

* Для заголовка целого раздела документации (папки) в файлах ``index.rst`` используем ``####`` сверху и снизу.
* Заголовок главы, т.е. отдельного файла ``.rst`` с контентом форматируем с ``*****`` сверху и снизу.
* Для заголовков частей внутри файла используем одинарное "подчёркивание" снизу следующими символами в порядке
  возрастания глубины:

  1. ``===============``
  2. ``---------------``
  3. ``^^^^^^^^^^^^^^^``
  4. ``"""""""""""""""``

Если идёт текст, а дальше заголовок, то ставим перед ним две пробельные строки. Если заголовок, а затем сразу
заголовок следующего уровня, то одну пробельную строку.

.. code-block:: rst
  :linenos:
  :caption: intro/index.rst

  #######################
  Заголовок раздела/папки
  #######################

  .. toctree::

    bla-bla


.. code-block:: rst
  :linenos:
  :caption: intro/content-chapter.rst

  ***************
  Заголовок файла
  ***************

  Первый уровень внутри файла
  ===========================

  Текст


  Второй уровень
  --------------

  Третий
  ^^^^^^

  Текст


  Четвёртый
  """""""""

  Текст


ReadTheDocs
===========

Документация автоматически публикуется на специализированном бесплатном сервисе http://readthedocs.org по адресу
http://cordjs.readthedocs.org. Сервис "слушает" изменения в репозитории документации на Github и автоматически
собирает последнюю версию.

Для поддержки сборки в этом сервисе создан файл ``requirements.txt``, в котором перечислены дополнительные python
зависимости. В частности, там указана зависимость от кастомной темы ``guzzle`` (см. ниже). Поддержка этого файла явно
включена в продвинутых настройках ReadTheDocs.

Адрес проекта в админке ReadTheDocs: https://readthedocs.org/projects/cordjs/.


Доработка/изменение внешнего вида документации
==============================================

В качестве основы для внешнего вида используется тема Sphinx `guzzle_sphinx_theme
<https://github.com/guzzle/guzzle_sphinx_theme>`_ с некоторыми исправлениями. Для доработки темы в папке ``_themes``
создана новая тема под названием ``cordjs``, которая унаследована от ``guzzle`` (это прописано в файле
``_themes/cordjs/theme.conf``). В файле `_themes/cordjs/static/style.css <../_static/style.css>`_ прописаны
некоторые исправления адаптивной вёрстки и улучшения внешнего вида (шрифтов) темы. Есть доработки и в html-шаблонах
темы, которые лежат в папке ``_themes/cordjs``. Состав боковой панели для разных типов страниц настоен с помощью
конфигурационной переменной ``html_sidebars`` в файле `conf.py
<https://github.com/cordjs/cordjs-docs-ru/blob/master/conf.py>`_.

Возможности кастомизации внешнего вида документации в Sphinx довольно широки. Об этом можно почитать тут:

* Документация Sphinx `про создание тем <http://sphinx-doc.org/theming.html#creating-themes>`_ и `работу с шаблонами
  <http://sphinx-doc.org/templating.html>`_
* `Синтаксис шаблонизатора Jinja, который используется в Sphinx <http://jinja.pocoo.org/docs/dev/templates/>`_
* `Кастомизация самой темы guzzle <https://github.com/guzzle/guzzle_sphinx_theme/blob/master/README.rst>`_

Альтернативные темы Sphinx, на которые стоит обратить внимание:

* https://github.com/bitprophet/alabaster


Про красивые шрифты
-------------------

В процессе доработки темы оформления обнаружились полезные ресурсы на тему того, где и как брать красивые шрифты для
текста:

* `Google Fonts <https://www.google.com/fonts/>`_ --- большая бесплатная коллекция шрифтов от Google. Шрифты из этой
  библиотеки легко подключать в css-файле:

  .. code-block:: css
    :caption: _themes/cordjs/static/style.css

    @import url("http://fonts.googleapis.com/css?family=Roboto+Condensed");

* `Fontspace <http://www.fontspace.com/>`_ --- можно найти и скачать бесплатные шрифты. Использовать скачанный шрифт
  чуть сложнее:

  .. code-block:: css
    :caption: _themes/cordjs/static/style.css

    @font-face {
        font-family: 'Ubuntu Mono';
        src: url('fonts/ubuntu-mono/UbuntuMono-R.ttf');
    }

* `Обсуждение на stackexchange о том, какие шрифты лучше подходят для технической документации
  <http://graphicdesign.stackexchange.com/questions/51/what-font-types-are-good-for-a-technical-document>`_


Комментарии с помощью Disqus
============================

Интеграция с `Disqus <https://disqus.com/>`_ (универсальный сервис для добавления функции комментирования к
статическому контенту) поддерживается исопльзуемой темой ``guzzle`` с помощью параметра ``disqus_comments_shortname``,
прописанного в ``conf.py``. Короткое название сайта в системе Disqus --- ``cordjs``.

Для тем, которые не поддерживают Disqus напрямую, можно воспользоваться расширением для Sphinx:
https://sphinxcontrib-disqus.readthedocs.org/en/latest/.


Примеры документаций, написанных на Sphinx, в которые можно подглядывать
========================================================================

* https://docs.djangoproject.com (`исходники <https://github.com/django/django/tree/master/docs>`_)
* http://akka.io/docs/ (`исходники <https://github.com/akka/akka/tree/master/akka-docs>`_)

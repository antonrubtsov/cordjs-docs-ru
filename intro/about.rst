.. role:: strike
  :class: strike

*****************************
Что собой представляет CordJS
*****************************

CordJS (произносится "корд-джэ-эс") --- полноценный фреймворк для разработки приложений, реализующих пользовательский
интерфейс в web-браузерах (на технологиях HTML/CSS/Javascript) или в мобильных/десктоп-приложениях с помощью webview
(технология Phonegap/Cordova).

Под словом *полноценный* тут подразумевается то, что это не библиотека, которую легко встроить в проект, основанный
на каком-либо другом фреймворке. CordJS является технологией "себе на уме" (opinionated), т.е. диктует структуру
проекта, язык программирования и шаблонов, что в каких местах должно лежать и как это всё друг с другом работает.

При этом фреймворк предназначен только для разработки приложений-интерфейсов и предполагает, что бизнес-логика
представлена в виде отдельного бекенд-сервиса, написанного с использованием любой подходящей технологии, с котором
frontend-приложение взаимодействует через сеть посредством REST API.

Основной язык программирования для CordJS --- `CoffeeScript <http://coffeescript.org/>`_ (своего рода препроцессор
для Javascript), для файлов стилей используется CSS-препроцессор --- `Stylus <https://learnboost.github
.io/stylus/>`_, в качестве базового шаблонизатора --- `Dust.js <http://www.dustjs.com/>`_. Серверная часть и
утилиты командной строки работают на платформе `Node.js <http://nodejs.org/>`_.


Немного истории
===============

CordJS появился в компании `Мегаплан <http://megaplan.ru>`_ в 2012-м как попытка решить следующие проблемы/задачи:

* **Разложить всё по полочкам** в той части кода, которая касается пользовательский интерфейсов, иначе говоря ---
  HTML/JS/CSS. PHP-фреймворк даёт однозначные ответы на то, как организовать работу с моделями/БД, контроллерами и
  как рендерить HTML, но вопросы, связанные с JS/CSS, он решает или плохо или никак.

* **Убрать дублирование кода**, неизбежно возникавшее в случаях, когда какой-нибудь динамически виджет сначала
  рендерился на сервере с помощью PHP-фреймворка, а затем должен был изменяться в ответ на действия пользователя с
  помощью Javascript (без перезагрузки страницы).

* **Перейти на современные технологии** (:abbr:`SPA (Single Page Application)`). C 2007 года, в котором был создан
  Мегаплан, возможности браузеров ушли далеко вперёд и напрашивалось движение в сторону более отзывчивого
  веб-приложения, работающего без перезагрузки страницы.

* **Получить универсальную технологию для разработки любых интерфейсов (в том числе и мобильных)**. Очень большая и
  одна из наиболее трудоёмких частей разработки Мегаплана --- работа над пользовательскими интерфейсами. Их много и
  постоянно появляются новые. Поэтому разрабатывать под каждую мобильную платформу отдельное приложение на нативных
  технологиях --- это слишком дорого, не говоря уже о том, что является своего рода шагом назад после практически
  тотальной и триумфайлной победы веб-интерфейсов, работающих в браузере, над классическими устанавливаемыми
  desktop-приложениями.


Зачем нужно было разрабатывать очередной JS-фреймворк?
------------------------------------------------------

В 2012 году зоопарк JS-фреймворков был уже довольно внужительным, но ещё очень сырым. Явных лидеров из полноценных
фреймворков на тот момент было 2: `Angular <https://angularjs.org/>`_ и `Ember <http://emberjs.com/>`_. Решение
:strike:`изобретать велосипед` о разработке CordJS было принято после безуспешных попыток найти подходящий фреймворк.

Самая главная причина безуспешности поисков --- ни один из достойных внимания JS-фреймворков на тот момент **не
поддерживал серверного рендеринга**, т.е. возможности без двойной работы рендерить одну и ту же страницу как на
серверной стороне (node.js), так и на браузере в режиме :abbr:`SPA (Single Page Application)`. Сейчас это свойство
называют модным словом *изоморфный*. Необходимость заставлять пользователя наблюдать прогресс-бар после загрузки
страницы с сервера, невозможность отправить ссылку на текущую страницу другому пользователю (или опять же
невозможность реализовать это красиво), плохая совместимость с поисковыми роботами и прочие прелести классического веба,
которые отнимает SPA --- всё это казалось неприемлемемым компромиссом.

Вопрос необходимости поддержки серверного рендеринга остаётся спорным. Существует мнение, что это преимущества,
которые оно даёт, реализации не ст\ *о*\ ят сложности реализации, которая неизбежно добавляется, особенно для приложений
вроде Мегаплана, которые существуют только в закрытой (авторизованной) среде, а не в публичном вебе. Однако,
регулярно появляются новости о том, что та и или иная компания внедряет концепцию *универсального javascript* и
поддержку серверного javascript-рендеринга страниц.

Другая важная причина --- **отсутствие во фреймворках поддержки частичной загрузки кода приложения** в браузер. Все
как один используют технику сборки всего кода приложения в один большой файл с загрузкой его в самом начале. Понимая
масштаб и количество "экранов" интерфейса Мегаплана, решиться на такой шаг было невозможно.


История названия
----------------

На момент создания фреймворка на зарождающемся "рынке" фронтенд-фреймворков доминировал `backbone.js
<http://backbonejs.org/>`_, а среди предпочитающих coffescript --- `spine.js <http://spinejs.com/>`_ —-- практически
полный аналог. Слова *backbone* и *spine* означают одно и то же --- позвоночник. Мы подумали, что будет забавно и
стёбно, если мы назовём свой фреймворк "спинным мозгом", или сокращённо cord, чтобы встать в рядочек *=)*

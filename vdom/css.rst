******************************************
Реализация работы с CSS для новых виджетов
******************************************

Как и для старых виджетов, для описание стилей используется один из улучшителей синтаксиса CSS --- Stylus. Однако, для
реализации вышеописанных принципов, файлы организованы более строго и сборщик cordjs производит с ними дополнительные
манипуляции.


Какие бывают файлы стилей и где они располагаются
=================================================

* **Внешние CSS библиотеки/фреймворки.** Располагаются где-нибудь в папке ``public/vendor`` или ``public/assets`` и
  подлючаются с помощью директивы ``@require`` в основных stylus-файлах виджетов или настройки ``requireCss`` в
  конфигурационном файле бандла.
* **Внутренний CSS-фреймворк проекта** --- набор классов для общих базовых элементов и лейаута, форматирования контента
  и т.п., например как должны выглядеть кнопочки, параграфы текста, инпуты и т.д. Располагается в папке ``css`` в
  корне бандла (зачастую, "общего" бандла проекта, который называется ``common``). Подключается так же, как и внешние
  CSS-библиотеки, но для подключения должно быть использовано каконическое имя (с ``//``).
* **Общие stylus-библиотеки**, которые помогают убирать дублирование кода. Они не содержат конечных классов, но
  определяют переменные и базовые наборы свойств, используемые в нескольких других местах (общих библиотеках классов
  и виджетах). Располагается в папке ``css`` в корне бандла. Подключаются с помощью директивы ``@import`` в
  stylus-файлы внутренних библиотек или виджетов.
* **Основной stylus-файл виджета.** Объявляет набор классов, которые используются только в данном виджете и, возможно, в
  виджетах-наследниках. Располагается в папке виджета, называется так же, как и класс виджета, но со строчной буквы и
  с расширением ``.styl``. При наличии автоматически добавляется в css-зависимости виджета при сборке.
* **Дополнительные stylus-файлы виджета.** Могут понадобится, если в основном файле разросся и удобно выделить какие-то
  куски в отдельные файлы. Располагаются в папке виджета. Подключаются с помощью директивы ``@import`` с
  использованием относительного (локального) пути в основной файл виджета.


Как включать общие stylus файлы с переменными и библиотеками
============================================================

Для вынесения общих кусков stylus-кода (обычно это какие-либо переменные или базовые заготовки для классов), которые
используются в нескольких конечных файлах стилей, следует использовать обычную директиву ``@import``. Путь к требуемому
stylus-файлу можно задать несколькими способами:

* Каноническое имя в формате cordjs (с двойным слешом), например: ``common//baseColors``. Можно указывать как
  абсолютный (начинающийся со слеша), так и относительный путь (будет браться в расчёт бандл виджета). Двойной слеш
  в таком пути будет заменяться на ``/css/`` --- специальную папку для размещения общих стилей бандла.
* Путь относительно папки текущего stylus-файла (это либо папка виджета, либо папка ``css`` в корне бандла). Он может
  начинаться либо с ``./`` либо просто названием stylus-файла или подпапки.
* *(пока не реализовано)* Специальное название ``__super__`` может использоваться в основном stylus-файле виджета,
  который наследуется от другого виджета, и интерпретируется как импорт основного файла стилей родительского виджета.

Использование расширение ``.styl`` в путях не обязательно (и даже не желательно).

Пример объявления зависимостей:

.. code-block:: sass
  :linenos:
  :emphasize-lines: 1,2
  :caption: widgets/someWidget/someWidget.styl

  @import 'common//baseColors'
  @import 'subStyle'

  .some-class
    background-color: $mainBackground

Таким образом, можно испортировать stylus-файлы только из текущей папки или из специальных папок ``css`` в корне бандла.
Использовать стили из других виджетов (за исключением случая наследования) нельзя.

.. note::

  Директивой ``@import`` можно включать только stylus-файлы, добавление `буквалных ссылок на css-файлы
  <https://learnboost.github.io/stylus/docs/import.html#literal-css>`_, поддерживаемых в css, запрещено. Для добавления
  зависимостей от других файлов стилей используйте директиву ``@require`` (см. следующий подраздел).


Как добавлять зависимости от общей библиотеки стилей, внешних CSS-библиотек и фреймворков
=========================================================================================

В отличие от *старых* виджетов (виджетов 1.0), в которых css-зависимости определялись в самом классе виджета через
свойство ``@css``, в новых виджетах они объявляются в основном stylus-файле виджета (который называется так же, как и
класс виджета, только со строчной буквы) посредством директивы ``@require``. Путь к требуемому файлу можно задать двумя
способами:

* Каноническое имя в формате cordjs (с двойным слешом), например: ``common//baseStyles``. Можно указывать как
  абсолютный (начинающийся со слеша), так и относительный путь (будет браться в расчёт бандл виджета). Двойной слеш
  в таком пути будет заменяться на ``/css/`` --- специальную папку для размещения общих стилей бандла.
* Абсолютный URL, начинающийся с ``/assets/`` или ``/vendor/`` --- для добавления зависимостей от внешних
  css-фреймворков. Расширение ``.css`` можно не указывать.

Пример объявления зависимостей:

.. code-block:: sass
  :linenos:
  :emphasize-lines: 1,2
  :caption: widgets/someWidget/someWidget.styl

  @require '/vendor/bootstrap/bootstrap.css'
  @require 'common//baseStyles'

  @import '//bundleColors'

  .some-class
    color: $primary

Сборщик вырезает директивы ``@require``, прежде чем компилировать stylus-файл в css. Таким образом, воспользоваться
``@require``, `как обычно в stylus <https://learnboost.github.io/stylus/docs/import.html#require>`_, не получится,
следует использовать ``@import``.

.. warning::

  ``@require`` можно использовать только в основном stylus-файле виджета. Т.е. нельзя определить зависимость
  зависимости, сборщик выдаст ошибку. Это объясняется следующим: объявляя зависимость в основном файле виджета, мы
  хотим подключить стили для использования в самом виджете (его шаблоне), а объявляя зависимость в любом другом файле,
  мы, очевидно, хотим *переопределить какие-либо селекторы*, что само по себе является анти-паттерном (см. выше).


Особый случай --- наследование стилей при неследовании виджетов
===============================================================

.. todo::
  Описать поведение стилей при наследовании одного виджета от другого
